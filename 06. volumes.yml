#1 mount local path to specific node container path.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: deployment1
spec:
  selector:
    matchLabels:
      key: value
  template:
    metadata:
      labels:
        key: value
    spec:
      volumes:
        - name: volume1
          hostPath: #mounting local path with container path
            path: /var/local/path #local file system path in k8s node
        - name: volume2
          hostPath:
            path: /var/local/path
    
      containers:
      - name: myapp
        image: nginx
        resources:
          limits:
            memory: "128Mi"
            cpu: "500m"
        ports:
        - containerPort: 80
        volumeMounts:
          - name: volume2
            mountPath: /container/path # path inside the container

      - name: myapp2
        image: nginx
        resources:
          limits:
            memory: '128Mi'
            cpu: "500m"
        ports:
          - containerPort: 80
        volumeMounts:
          - name: volume1
            mountPath: /container2/path # path inside the container 
      
---
# persistent volume claim - static claiming
# 1. add pv as ebs volume in cluster level, so when ever any pod needs storage it will claim the request to get the storage.
# 2. pvc is also like a pod running in cluster. pvc and sc are at node level where as pv is at cluster level

#1. creating pv

apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv1
spec:
  capacity:
    storage: 20
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Recycle/Retain/Delete # recycle- reuse the volumeclaim without data, retain-retain data for next pod, Delete - delete the storage requested from the pv
  storageClassName: slow
  mountOptions:
    - hard
    - nfsvers=4.1
  nfs:
    path: /tmp
    server: 172.17.0.2
---
#2. create a pvc
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc1
spec:
  storageClassName: slow
  resources: 
    requests:
      storage: 20
  accessModes:
    - ReadWriteOnce
---
#3. Add PVC inside a deployment file

apiVersion: apps/v1
kind: Deployment
metadata:
  name: depeloyment1
spec:
  selector:
    matchLabels:
      key: value
  replicas: 2
  template:
    metadata:
      labels:
        key: value
    spec:
      volumes:
        - name:  persistentvolume
          persistentVolumeClaim: pvc1
      containers:
      - name: myapp
        image: nginx
        resources:
          limits:
            memory: "128Mi"
            cpu: "500m"
        ports:
        - containerPort: 80
        volumeMounts:
          - name: volume2
            mountPath: /container/path # path inside the container, every pod will have this path and every pod will have the data inside this
---
# create dynamic volumes, pv will be created at the time of pvc creation.
# you dont need to create pv or ebs volume here. create storageclass, pvc and integrate with deployment pods

#storageclass
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: slow
provisioner: kubernetes.io/aws-ebs #create aws ebs volume
parameters:
  type: gp2
  fsType: ext4
reclaimPolicy: Retain
allowVolumeExpansion: true
mountOptions:
  - debug
volumeBindingMode: Immediate
---
#pvc
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ebsvolumeclaim
  namespace: default
  labels:
    key: value
spec:
  storageClassName: slow
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi #how much gb of storage you need
---
#pvc will be available and will not go to bound unless u integrate pod to claim for storage

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: deployment1
spec:
  replicas: 2
  template:
    metadata:
      labels:
        editor: vscode
    spec:
    volumes:
      - name: ebsvolume
        persistentVolumeClaim:
          name: ebsvolumeclaim 
    containers:
    - name: name
      image: Enter containers image
      volumeMounts:
        - name:  ebsvolume
          mountPath:  /container/volume/path
#now when the pod request for claim pv will be created automatically by creating a new ebs volume with 2gb storage
---
